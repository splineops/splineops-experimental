# pyramidfilters.py

import numpy as np

def pyramid_filter_spline_l2(order):
    """
    Initializes down- and up-sampling filter arrays for
    least squares splines of order 0 to 3. (little l2 norm)
    Returns g (reduce filter), h (expand filter)
    """
    if order == 0:
        g = np.array([])
        h = np.array([])
    elif order == 1:
        g = np.array([
            0.707107, 0.292893, -0.12132, -0.0502525, 0.0208153,
            0.00862197, -0.00357134, -0.0014793, 0.000612745
        ])
        h = np.array([1.0, 0.5])
    elif order == 2:
        g = np.array([
            0.617317, 0.310754, -0.0949641, -0.0858654, 0.0529153,
            0.0362437, -0.0240408, -0.0160987, 0.0107498, 0.00718418,
            -0.00480004, -0.00320734, 0.00214306, 0.00143195,
            -0.0009568, -0.000639312
        ])
        h = np.array([
            1.0, 0.585786, 0.0, -0.100505, 0.0, 0.0172439,
            0.0, -0.00295859, 0.0, 0.000507614
        ])
    elif order == 3:
        g = np.array([
            0.596797, 0.313287, -0.0827691, -0.0921993, 0.0540288,
            0.0436996, -0.0302508, -0.0225552, 0.0162251, 0.0118738,
            -0.00861788, -0.00627964, 0.00456713, 0.00332464,
            -0.00241916, -0.00176059, 0.00128128, 0.000932349,
            -0.000678643, -0.000493682
        ])
        h = np.array([
            1.0, 0.600481, 0.0, -0.127405, 0.0, 0.034138,
            0.0, -0.00914725, 0.0, 0.002451, 0.0, -0.000656743
        ])
    else:
        raise ValueError("Spline filters only defined for n=0,1,2,3")
    return g, h

def pyramid_filter_spline_L2(order):
    """
    Initializes down- and up-sampling filter arrays for
    L2 spline pyramid of order 0 to 5.
    Returns g (reduce filter), h (expand filter)
    """
    if order == 0:
        g = np.array([])
        h = np.array([])
    elif order == 1:
        g = np.array([
            0.683013, 0.316987, -0.116025, -0.0849365, 0.0310889,
            0.0227587, -0.00833025, -0.00609817, 0.00223208,
            0.001634, -0.000598085, -0.000437829, 0.000160256,
            0.000117316
        ])
        h = np.array([1.0, 0.5])
    elif order == 3:
        g = np.array([
            0.594902, 0.31431, -0.0816632, -0.0942586, 0.0541374,
            0.0454105, -0.0307778, -0.0236728, 0.0166858, 0.0125975,
            -0.00895838, -0.00673388, 0.00479847, 0.00360339,
            -0.00256892, -0.00192868, 0.00137514, 0.00103237,
            -0.000736093, -0.000552606, 0.000394017, 0.000295799,
            -0.00021091, -0.000158335, 0.000112896
        ])
        h = np.array([
            1.0, 0.600481, 0.0, -0.127405, 0.0, 0.034138,
            0.0, -0.00914725, 0.0, 0.002451, 0.0, -0.000656743
        ])
    elif order == 5:
        g = np.array([
            0.564388, 0.316168, -0.0597634, -0.0998708, 0.0484525,
            0.0539099, -0.0355614, -0.033052, 0.0246347, 0.0212024,
            -0.0166097, -0.0138474, 0.0110719, 0.00911006, -0.00734567,
            -0.0060115, 0.00486404, 0.00397176, -0.00321822, -0.00262545,
            0.00212859, 0.00173587, -0.0014077, -0.0011478, 0.000930899,
            0.000758982, -0.000615582, -0.000501884, 0.000407066,
            0.000331877, -0.00026918, -0.000219459, 0.000178, 0.00014512,
            -0.000117706
        ])
        h = np.array([
            1.0, 0.619879, 0.0, -0.167965, 0.0, 0.0686374,
            0.0, -0.0293948, 0.0, 0.0126498, 0.0, -0.00544641,
            0.0, 0.00234508, 0.0, -0.00100973, 0.0, 0.000434766,
            0.0, -0.000187199
        ])
    else:
        raise ValueError("Spline filters only defined for n=0,1,3,5")
    return g, h

def pyramid_filter_centered(order):
    """
    Initializes down- and up-sampling filter arrays for
    least squares CENTERED splines of order 0 to 4. (little l2 norm)
    Returns g (reduce filter), h (expand filter)
    """
    if order == 0:
        g = np.array([1.0])
        h = np.array([2.0])
    elif order == 1:
        g = np.array([
            1.0, 0.333333, -0.333333, -0.111111, 0.111111,
            0.037037, -0.037037, -0.0123457, 0.0123457,
            0.00411523, -0.00411523, -0.00137174, 0.00137174,
            0.000457247, -0.000457247, -0.000152416, 0.000152416,
            0.0000508053, -0.0000508053, -0.0000169351, 0.0000169351
        ])
        h = np.array([1.0, 0.5])
    elif order == 2:
        g = np.array([
            0.738417, 0.307916, -0.171064, -0.0799199, 0.0735791,
            0.03108, -0.0307862, -0.0128561, 0.0128425, 0.00535611,
            -0.00535548, -0.00223325, 0.00223322, 0.000931242,
            -0.00093124, -0.000388322, 0.000388322, 0.000161928,
            -0.000161928, -0.0000675233, 0.0000675233
        ])
        h = np.array([
            1.20711, 0.585786, -0.12132, -0.100505, 0.0208153,
            0.0172439, -0.00357134, -0.00295859, 0.000612745,
            0.000507614, -0.00010513
        ])
    elif order == 3:
        g = np.array([
            0.708792, 0.328616, -0.165157, -0.114448, 0.0944036,
            0.0543881, -0.05193, -0.0284868, 0.0281854, 0.0152877,
            -0.0152508, -0.00825077, 0.00824629, 0.00445865,
            -0.0044582, -0.00241009, 0.00241022, 0.00130278,
            -0.00130313, -0.000704109, 0.000704784
        ])
        h = np.array([
            1.13726, 0.625601, -0.0870191, -0.159256, 0.0233167,
            0.0426725, -0.00624769, -0.0114341, 0.00167406,
            0.00306375, -0.000448564, -0.000820929, 0.000120192,
            0.000219967, -0.0000322054, -0.00005894
        ])
    elif order == 4:
        g = np.array([
            0.673072, 0.331218, -0.139359, -0.12051, 0.086389,
            0.0611801, -0.0542989, -0.034777, 0.033388, 0.0206275,
            -0.0203475, -0.0124183, 0.0123625, 0.00751369,
            -0.00750374, -0.00455348, 0.00455363, 0.00276047,
            -0.00276406, -0.00167279, 0.00167938
        ])
        h = np.array([
            1.14324, 0.643609, -0.0937888, -0.194993, 0.030127,
            0.0699433, -0.0108345, -0.0252663, 0.00391424,
            0.00912967, -0.00141437, -0.00329892, 0.000511068,
            0.00119204, -0.00018467, -0.000430732, 0.0000667289,
            0.000155641, -0.0000241119, -0.0000562395
        ])
    else:
        raise ValueError("Spline filters only defined for n=0,1,2,3,4")
    return g, h

def pyramid_filter_centered_L2(order):
    """
    Initializes the symmetric down- and up-sampling filter arrays for
    L2 spline pyramid of order 0 to 5 when the downsampled grid is centered.
    Returns g (reduce filter), h (expand filter)
    """
    if order == 0:
        g = np.array([1.0])
        h = np.array([2.0])
    elif order == 1:
        g = np.array([
            0.820272, 0.316987, -0.203044, -0.0849365, 0.0544056,
            0.0227587, -0.0145779, -0.00609817, 0.00390615,
            0.001634, -0.00104665, -0.000437829, 0.000280449,
            0.000117316, -0.000075146, -0.0000314347, 0.0000201353
        ])
        h = np.array([
            1.20096, 0.473076, -0.0932667, 0.0249907, -0.00669625,
            0.00179425, -0.000480769, 0.000128822, -0.0000345177
        ])
    elif order == 2:
        g = np.array([
            0.727973, 0.314545, -0.167695, -0.0893693, 0.0768426,
            0.0354175, -0.0331015, -0.0151496, 0.0142588, 0.00651781,
            -0.00613959, -0.00280621, 0.00264356, 0.00120827,
            -0.00113825, -0.000520253, 0.000490105, 0.000224007,
            -0.000211028, -0.0000964507, 0.0000908666
        ])
        h = np.array([
            1.20711, 0.585786, -0.12132, -0.100505, 0.0208153,
            0.0172439, -0.00357134, -0.00295859, 0.000612745,
            0.000507614, -0.00010513
        ])
    elif order == 3:
        g = np.array([
            0.70222, 0.328033, -0.159368, -0.113142, 0.0902447,
            0.0530861, -0.0492084, -0.0274987, 0.0264529, 0.0146073,
            -0.0141736, -0.0078052, 0.00758856, 0.00417626,
            -0.00406225, -0.00223523, 0.00217454, 0.00119638,
            -0.00116412, -0.000640258, 0.000623379
        ])
        h = np.array([
            1.15089, 0.623278, -0.0961988, -0.155743, 0.0259827,
            0.041346, -0.0067263, -0.0112084, 0.00187221,
            0.00296581, -0.000481593, -0.000805427, 0.000134792,
            0.000212736, -0.00003447
        ])
    elif order == 4:
        g = np.array([
            0.672101, 0.331667, -0.138779, -0.121385, 0.0864024,
            0.0618776, -0.0545165, -0.0352403, 0.0335951, 0.0209537,
            -0.0205211, -0.0126439, 0.0124959, 0.0076682,
            -0.00760135, -0.00465835, 0.00462238, 0.00283148,
            -0.00281055, -0.00172137, 0.00170884
        ])
        h = np.array([
            1.14324, 0.643609, -0.0937888, -0.194993, 0.030127,
            0.0699433, -0.0108345, -0.0252663, 0.00391424,
            0.00912967, -0.00141437, -0.00329892, 0.000511068,
            0.00119204, -0.00018467, -0.000430732, 0.0000667289,
            0.000155641, -0.0000241119, -0.0000562396
        ])
    else:
        raise ValueError("Spline filters only defined for n=0,1,2,3,4")
    return g, h

def pyramid_filter_centered_L2_derivative(order):
    """
    Initializes the symmetric down- and up-sampling filter arrays for
    L2 DERIVATIVE spline pyramid of order 0 to 4 when the downsampled grid is centered.
    Returns g (reduce filter), h (expand filter)
    """
    if order == 0:
        g = np.array([1.0])
        h = np.array([2.0])
    elif order == 1:
        g = np.array([
            0.820272, 0.316987, -0.203044, -0.0849365, 0.0544056,
            0.0227587, -0.0145779, -0.00609817, 0.00390615,
            0.001634, -0.00104665, -0.000437829, 0.000280449,
            0.000117316, -0.000075146, -0.0000314347, 0.0000201353
        ])
        h = np.array([
            1.20096, 1.20096, -0.254809, 0.068276, -0.0182945,
            0.004902, -0.00131349, 0.000351947, -0.000094304,
            0.0000252687
        ])
    elif order == 2:
        g = np.array([
            0.727973, 0.314545, -0.167695, -0.0893693, 0.0768426,
            0.0354175, -0.0331015, -0.0151496, 0.0142588, 0.00651781,
            -0.00613959, -0.00280621, 0.00264356, 0.00120827,
            -0.00113825, -0.000520253, 0.000490105, 0.000224007,
            -0.000211028, -0.0000964507, 0.0000908666
        ])
        h = np.array([
            1.20711, 1.20711, -0.282843, -0.234314, 0.0486836,
            0.0403741, -0.00836056, -0.00693043, 0.00143426,
            0.0011889, -0.000246268
        ])
    elif order == 3:
        g = np.array([
            0.70222, 0.328033, -0.159368, -0.113142, 0.0902447,
            0.0530861, -0.0492084, -0.0274987, 0.0264529, 0.0146073,
            -0.0141736, -0.0078052, 0.00758856, 0.00417626,
            -0.00406225, -0.00223523, 0.00217454, 0.00119638,
            -0.00116412, -0.000640258, 0.000623379
        ])
        h = np.array([
            1.15089, 1.24656, -0.192398, -0.311487, 0.0519654,
            0.082692, -0.0134526, -0.0224169, 0.00374441,
            0.00593163, -0.000963186, -0.00161085, 0.000269584,
            0.000425472, -0.00006894
        ])
    elif order == 4:
        g = np.array([
            0.672101, 0.331667, -0.138779, -0.121385, 0.0864024,
            0.0618776, -0.0545165, -0.0352403, 0.0335951, 0.0209537,
            -0.0205211, -0.0126439, 0.0124959, 0.0076682,
            -0.00760135, -0.00465835, 0.00462238, 0.00283148,
            -0.00281055, -0.00172137, 0.00170884
        ])
        h = np.array([
            1.14324, 1.28722, -0.187578, -0.389986, 0.0602539,
            0.139887, -0.021669, -0.0505326, 0.00782847,
            0.0182593, -0.00282874, -0.00659784, 0.00102214,
            0.00238408, -0.00036934, -0.000861463, 0.000133458,
            0.000311282, -0.0000482238, -0.000112479
        ])
    else:
        raise ValueError("Spline derivative filters only defined for n=0,1,2,3,4")
    return g, h
